// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum CarServer_Invalid: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case invalid // = 0
  case UNRECOGNIZED(Int)

  init() {
    self = .invalid
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalid
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .invalid: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [CarServer_Invalid] = [
    .invalid,
  ]

}

enum CarServer_MediaPlaybackStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case stopped // = 0
  case playing // = 1
  case paused // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .stopped
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .stopped
    case 1: self = .playing
    case 2: self = .paused
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .stopped: return 0
    case .playing: return 1
    case .paused: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [CarServer_MediaPlaybackStatus] = [
    .stopped,
    .playing,
    .paused,
  ]

}

enum CarServer_StwHeatLevel: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknown // = 0
  case off // = 1
  case low // = 2
  case high // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .off
    case 2: self = .low
    case 3: self = .high
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .off: return 1
    case .low: return 2
    case .high: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [CarServer_StwHeatLevel] = [
    .unknown,
    .off,
    .low,
    .high,
  ]

}

struct CarServer_Void: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CarServer_LatLong: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitude: Float = 0

  var longitude: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CarServer_ChargePortLatchState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: CarServer_ChargePortLatchState.OneOf_Type? = nil

  var sna: CarServer_Void {
    get {
      if case .sna(let v)? = type {return v}
      return CarServer_Void()
    }
    set {type = .sna(newValue)}
  }

  var disengaged: CarServer_Void {
    get {
      if case .disengaged(let v)? = type {return v}
      return CarServer_Void()
    }
    set {type = .disengaged(newValue)}
  }

  var engaged: CarServer_Void {
    get {
      if case .engaged(let v)? = type {return v}
      return CarServer_Void()
    }
    set {type = .engaged(newValue)}
  }

  var blocking: CarServer_Void {
    get {
      if case .blocking(let v)? = type {return v}
      return CarServer_Void()
    }
    set {type = .blocking(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable, Sendable {
    case sna(CarServer_Void)
    case disengaged(CarServer_Void)
    case engaged(CarServer_Void)
    case blocking(CarServer_Void)

  }

  init() {}
}

struct CarServer_PreconditioningTimes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var times: CarServer_PreconditioningTimes.OneOf_Times? = nil

  var allWeek: CarServer_Void {
    get {
      if case .allWeek(let v)? = times {return v}
      return CarServer_Void()
    }
    set {times = .allWeek(newValue)}
  }

  var weekdays: CarServer_Void {
    get {
      if case .weekdays(let v)? = times {return v}
      return CarServer_Void()
    }
    set {times = .weekdays(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Times: Equatable, Sendable {
    case allWeek(CarServer_Void)
    case weekdays(CarServer_Void)

  }

  init() {}
}

struct CarServer_OffPeakChargingTimes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var times: CarServer_OffPeakChargingTimes.OneOf_Times? = nil

  var allWeek: CarServer_Void {
    get {
      if case .allWeek(let v)? = times {return v}
      return CarServer_Void()
    }
    set {times = .allWeek(newValue)}
  }

  var weekdays: CarServer_Void {
    get {
      if case .weekdays(let v)? = times {return v}
      return CarServer_Void()
    }
    set {times = .weekdays(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Times: Equatable, Sendable {
    case allWeek(CarServer_Void)
    case weekdays(CarServer_Void)

  }

  init() {}
}

struct CarServer_ChargeSchedule: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// datetime in epoch time
  var id: UInt64 = 0

  var name: String = String()

  var daysOfWeek: Int32 = 0

  var startEnabled: Bool = false

  /// 24h in minutes
  var startTime: Int32 = 0

  var endEnabled: Bool = false

  /// 24h in minutes
  var endTime: Int32 = 0

  var oneTime: Bool = false

  var enabled: Bool = false

  var latitude: Float = 0

  var longitude: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CarServer_PreconditionSchedule: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// datetime in epoch time
  var id: UInt64 = 0

  var name: String = String()

  var daysOfWeek: Int32 = 0

  /// 24h in minutes
  var preconditionTime: Int32 = 0

  var oneTime: Bool = false

  var enabled: Bool = false

  var latitude: Float = 0

  var longitude: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CarServer"

extension CarServer_Invalid: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0INVALID\0")
}

extension CarServer_MediaPlaybackStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Stopped\0\u{1}Playing\0\u{1}Paused\0")
}

extension CarServer_StwHeatLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0StwHeatLevel_Unknown\0\u{1}StwHeatLevel_Off\0\u{1}StwHeatLevel_Low\0\u{1}StwHeatLevel_High\0")
}

extension CarServer_Void: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Void"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CarServer_Void, rhs: CarServer_Void) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CarServer_LatLong: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LatLong"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}latitude\0\u{1}longitude\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.latitude) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.longitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitude.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.latitude, fieldNumber: 1)
    }
    if self.longitude.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.longitude, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CarServer_LatLong, rhs: CarServer_LatLong) -> Bool {
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CarServer_ChargePortLatchState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChargePortLatchState"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}SNA\0\u{1}Disengaged\0\u{1}Engaged\0\u{1}Blocking\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: CarServer_Void?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .sna(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .sna(v)
        }
      }()
      case 2: try {
        var v: CarServer_Void?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .disengaged(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .disengaged(v)
        }
      }()
      case 3: try {
        var v: CarServer_Void?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .engaged(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .engaged(v)
        }
      }()
      case 4: try {
        var v: CarServer_Void?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .blocking(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .blocking(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .sna?: try {
      guard case .sna(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .disengaged?: try {
      guard case .disengaged(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .engaged?: try {
      guard case .engaged(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .blocking?: try {
      guard case .blocking(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CarServer_ChargePortLatchState, rhs: CarServer_ChargePortLatchState) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CarServer_PreconditioningTimes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PreconditioningTimes"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}all_week\0\u{1}weekdays\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: CarServer_Void?
        var hadOneofValue = false
        if let current = self.times {
          hadOneofValue = true
          if case .allWeek(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.times = .allWeek(v)
        }
      }()
      case 2: try {
        var v: CarServer_Void?
        var hadOneofValue = false
        if let current = self.times {
          hadOneofValue = true
          if case .weekdays(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.times = .weekdays(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.times {
    case .allWeek?: try {
      guard case .allWeek(let v)? = self.times else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .weekdays?: try {
      guard case .weekdays(let v)? = self.times else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CarServer_PreconditioningTimes, rhs: CarServer_PreconditioningTimes) -> Bool {
    if lhs.times != rhs.times {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CarServer_OffPeakChargingTimes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OffPeakChargingTimes"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}all_week\0\u{1}weekdays\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: CarServer_Void?
        var hadOneofValue = false
        if let current = self.times {
          hadOneofValue = true
          if case .allWeek(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.times = .allWeek(v)
        }
      }()
      case 2: try {
        var v: CarServer_Void?
        var hadOneofValue = false
        if let current = self.times {
          hadOneofValue = true
          if case .weekdays(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.times = .weekdays(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.times {
    case .allWeek?: try {
      guard case .allWeek(let v)? = self.times else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .weekdays?: try {
      guard case .weekdays(let v)? = self.times else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CarServer_OffPeakChargingTimes, rhs: CarServer_OffPeakChargingTimes) -> Bool {
    if lhs.times != rhs.times {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CarServer_ChargeSchedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChargeSchedule"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}name\0\u{3}days_of_week\0\u{3}start_enabled\0\u{3}start_time\0\u{3}end_enabled\0\u{3}end_time\0\u{3}one_time\0\u{1}enabled\0\u{1}latitude\0\u{1}longitude\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.daysOfWeek) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.startEnabled) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.startTime) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.endEnabled) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.endTime) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.oneTime) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self.latitude) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.longitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.daysOfWeek != 0 {
      try visitor.visitSingularInt32Field(value: self.daysOfWeek, fieldNumber: 3)
    }
    if self.startEnabled != false {
      try visitor.visitSingularBoolField(value: self.startEnabled, fieldNumber: 4)
    }
    if self.startTime != 0 {
      try visitor.visitSingularInt32Field(value: self.startTime, fieldNumber: 5)
    }
    if self.endEnabled != false {
      try visitor.visitSingularBoolField(value: self.endEnabled, fieldNumber: 6)
    }
    if self.endTime != 0 {
      try visitor.visitSingularInt32Field(value: self.endTime, fieldNumber: 7)
    }
    if self.oneTime != false {
      try visitor.visitSingularBoolField(value: self.oneTime, fieldNumber: 8)
    }
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 9)
    }
    if self.latitude.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.latitude, fieldNumber: 10)
    }
    if self.longitude.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.longitude, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CarServer_ChargeSchedule, rhs: CarServer_ChargeSchedule) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.daysOfWeek != rhs.daysOfWeek {return false}
    if lhs.startEnabled != rhs.startEnabled {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endEnabled != rhs.endEnabled {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.oneTime != rhs.oneTime {return false}
    if lhs.enabled != rhs.enabled {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CarServer_PreconditionSchedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PreconditionSchedule"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}name\0\u{3}days_of_week\0\u{3}precondition_time\0\u{3}one_time\0\u{1}enabled\0\u{1}latitude\0\u{1}longitude\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.daysOfWeek) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.preconditionTime) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.oneTime) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.latitude) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.longitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.daysOfWeek != 0 {
      try visitor.visitSingularInt32Field(value: self.daysOfWeek, fieldNumber: 3)
    }
    if self.preconditionTime != 0 {
      try visitor.visitSingularInt32Field(value: self.preconditionTime, fieldNumber: 4)
    }
    if self.oneTime != false {
      try visitor.visitSingularBoolField(value: self.oneTime, fieldNumber: 5)
    }
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 6)
    }
    if self.latitude.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.latitude, fieldNumber: 7)
    }
    if self.longitude.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.longitude, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CarServer_PreconditionSchedule, rhs: CarServer_PreconditionSchedule) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.daysOfWeek != rhs.daysOfWeek {return false}
    if lhs.preconditionTime != rhs.preconditionTime {return false}
    if lhs.oneTime != rhs.oneTime {return false}
    if lhs.enabled != rhs.enabled {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
